// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/apiclients.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/apiclients.go -destination=internal/clients/mock/mocks.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/Nikola-Milovic/vyking-interview/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockCountryAPIClient is a mock of CountryAPIClient interface.
type MockCountryAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockCountryAPIClientMockRecorder
	isgomock struct{}
}

// MockCountryAPIClientMockRecorder is the mock recorder for MockCountryAPIClient.
type MockCountryAPIClientMockRecorder struct {
	mock *MockCountryAPIClient
}

// NewMockCountryAPIClient creates a new mock instance.
func NewMockCountryAPIClient(ctrl *gomock.Controller) *MockCountryAPIClient {
	mock := &MockCountryAPIClient{ctrl: ctrl}
	mock.recorder = &MockCountryAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountryAPIClient) EXPECT() *MockCountryAPIClientMockRecorder {
	return m.recorder
}

// GetCountryInfo mocks base method.
func (m *MockCountryAPIClient) GetCountryInfo(ctx context.Context, countryCode string) (domain.CountryInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryInfo", ctx, countryCode)
	ret0, _ := ret[0].(domain.CountryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryInfo indicates an expected call of GetCountryInfo.
func (mr *MockCountryAPIClientMockRecorder) GetCountryInfo(ctx, countryCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryInfo", reflect.TypeOf((*MockCountryAPIClient)(nil).GetCountryInfo), ctx, countryCode)
}
